@using System;
@using System.Collections.Generic;
@using Fora.Client.Services
@using Fora.Shared;
@using Blazored.LocalStorage
@inject IUserManager UserManager;
@inject IInterestManager InterestManager;
@inject IThreadManager ThreadManager;
@inject ILocalStorageService LocalStorage;
@inject NavigationManager NavigationManager
@page "/usersettings"


@if(loginStatus != null && loginStatus.IsLoggedIn)
{
    <h3 class="text-center">You're logged in!</h3>



    
<div class="row">
<div class="col-3">
<h4>Interests</h4>
<h5>@loadingMessage</h5>
<ul>
    
    @foreach (var interest in interests)
    {
    
        <li><em>@interest.Name </em>
            <button class="btn btn-outline-success" onclick="@(() => AddInterest(interest.Id))"> Add To Favorites </button>
        </li>
            if(CurrentUser.Id == Convert.ToString(interest.UserId))
            {                       
                <btn class="btn btn-outline-info" @onclick="() => RemoveUserInterest(interest.Id)" >Delete Interest</btn>                      
            }        
    }
</ul>
</div>


<div class="col-3">

    <h4>My Threads</h4>
        <ul>
            @foreach(var thread in userThreads)
            {
                    if(CurrentUser.Id != Convert.ToString(thread.UserId))
                    {
                        <li><a href="thread/@thread.Id">@thread.Name</a></li>
                    }                
            }
        </ul>

</div>
@*Favorite Lista*@

    <div class="col-3">
        <h4>Favorite Interests</h4>
        <ul>
            @foreach(var favo in userInterests)
            {
                
                <li><em>@favo.Name </em><button onclick="@(() => RemoveUserInterest(favo.Id))" 
                class="btn btn-outline-danger"> Remove </button></li>

            }
        </ul>



    </div>
</div>

<h2> Create a new interest</h2>
<EditForm Model="@Interest" OnValidSubmit="CreateNewInterest">
    <InputText @bind-Value="Interest.Name" type="text" placeholder="Name of interest"></InputText>
    <button type="submit">Create</button>
</EditForm>



// ----------------------------------------------------------------------
// -------------------- User Settings
<div class="row">
<h3>Change Password, Delete User and Flag User</h3>
<EditForm Model=@User OnSubmit="ChangePassword">
<div class="col-2">  

    <label>Current password:</label>
    <InputText type="password" @bind-Value="User.Password"></InputText>
    <br />
        <label>New password:</label>
    <InputText type="password" @bind-Value="newPassword" />
    <br />
    <label>Confirm Password:</label>
    <InputText type="password" @bind-Value="confirmPassword" />
    <input type="submit" class="btn-outline-primary" value="Change password" />
    <a>@Message</a>
</div>
</EditForm>
 
<div class="col-4"></div>
<div class="col-2">
    @*Delete User *@
    <button class="btn-outline-danger" @onclick="DeleteUser">Delete User</button>
    <br />    
    @*Ban User *@
    <button class="btn-outline-warning" @onclick="BanUser">Ban User</button>
    <br />
    @*Unban User*@
    
</div>
   
</div>   
}

@if(loginStatus != null && loginStatus.IsBanned)
{
    <h3>This user has been flagged as Banned</h3>
    <button class="btn-outline-success" @onclick="UnbanUser">Unban User</button>
}



@code {

    public List<InterestModel> interests = new();

    public InterestModel Interest { get; set; } = new();
    public ApplicationUser CurrentUser { get; set; }
    public List<InterestModel> userInterests = new();
    public List<ThreadModel> myThreads = new();
    public List<ThreadModel> userThreads = new();

    string? loadingMessage;
    string? Message;
    string tokenFromLocalStorage = "Före token";

    public UserDto User { get; set; } = new();

    private LoginDto? loginStatus;
    private string? token;
    private string? newPassword;
    private string? confirmPassword;



    protected override async Task OnInitializedAsync()
    {
        token = await LocalStorage.GetItemAsStringAsync("token");

        CurrentUser = await UserManager.GetAsync(token);

        loginStatus = await UserManager.CheckUserLogin(token);

        userInterests = await InterestManager.GetUserInterests(token);

        userThreads = await ThreadManager.GetThreads();

        loadingMessage = "Loading interests...";
        interests = await InterestManager.GetInterests();

        loadingMessage = "Finished loading!";
    }



    private async Task AddInterest(int id)
    {
        var ui = interests.FirstOrDefault(ui => ui.Id == id);

        if(ui != null )
        {
            await InterestManager.AddUserInterests(ui, token);
            userInterests = await InterestManager.GetUserInterests(token);
            StateHasChanged();
        }
    }

    public async Task RemoveUserInterest(int id)
    {

        var ui = interests.FirstOrDefault(ui => ui.Id == id);

        if(ui != null)
        {
            await InterestManager.RemoveUserInterests(ui, token);
            userInterests = await InterestManager.GetUserInterests(token);
            StateHasChanged();
        }
    }

    public async Task CreateNewInterest()
    {
        // Get token
        tokenFromLocalStorage = await LocalStorage.GetItemAsStringAsync("token");
        // Skickar token tillsammans med Interest objekt
        await InterestManager.CreateInterest(Interest, tokenFromLocalStorage);

        interests = await InterestManager.GetInterests();
    }


    public void DeleteUser()
    {
        UserManager.DeleteUser(token);

        string action = "Deleted";

        NavigationManager.NavigateTo($"LogoutLanding/{action}", true);
    }

    public async Task BanUser()
    {
        await UserManager.BanUser(token);        
        string action = "Banned";
        NavigationManager.NavigateTo($"LogoutLanding/{action}", true);


    }
    public async Task UnbanUser()
    {
        await UserManager.UnbanUser(token);
        NavigationManager.NavigateTo("usersettings", true);
    }




    public async Task ChangePassword()
    {
        // Run change password method in UserManager

        string token = await LocalStorage.GetItemAsStringAsync("token");

        if(newPassword == confirmPassword && token != null)
        {
            await UserManager.ChangePasswordUser(User, newPassword, token);
            Message = "Password Changed";
        }
    }

   
}



