@using System;
@using System.Collections.Generic;
@using Fora.Client.Services
@using Fora.Shared;
@using Blazored.LocalStorage
@inject IUserManager UserManager;
@inject IInterestManager InterestManager;
@inject ILocalStorageService LocalStorage;
@inject NavigationManager NavigationManager
@page "/usersettings"


@if(loginStatus != null && loginStatus.IsLoggedIn)
{
    <h3 class="text-center">You're logged in</h3>




<div class="row">
<div class="col-3">
<h4>Interests</h4>
<h5>@loadingMessage</h5>
<ul>
    
@foreach (var element in interests)
{
    
    <li><em>@element.Name </em><button onclick="@(() => AddInterest(element.Id))" 
        class="btn btn-outline-success"> Add To Favorites </button></li>
   
}
</ul>
</div>


<div class="col-6"></div>
@*Favorite Lista*@

    <div class="col-3">
        <ul>
            @foreach(var favo in userInterests)
            {
                <li>@favo.Name</li>
            }
        </ul>



    </div>
</div>

<h2> Create a new interest</h2>
<EditForm Model="@Interest" OnSubmit="CreateNewInterest">
    <InputText @bind-Value="Interest.Name" type="text" placeholder="Name of interest"></InputText>
    <button type="submit">Create</button>
</EditForm>



// ----------------------------------------------------------------------
// -------------------- User Settings
<div class="row">
<h3>Change Password, Delete User and Flag User</h3>
<EditForm Model=@User OnSubmit="ChangePassword">
<div class="col-2">  

    <label>Current password:</label>
    <InputText @bind-Value="User.Password"></InputText>
    <br />
        <label>New password:</label>
    <InputText @bind-Value="newPassword" />
    <br />
    <label>Confirm Password:</label>
    <InputText @bind-Value="confirmPassword" />
    <input type="submit" class="btn-outline-primary" value="Change password" />
</div>
</EditForm>
 
<div class="col-4"></div>
<div class="col-2">
    <button class="btn-outline-danger" @onclick="DeleteUser">Delete user</button>
</div>
   
</div>   
}




@code {

    public List<InterestModel> interests = new();

    public InterestModel Interest { get; set; } = new();

    public List<InterestModel> userInterests = new();

    string? loadingMessage;

    string tokenFromLocalStorage = "Före token";

    public UserDto User { get; set; } = new();

    private LoginDto? loginStatus;
    private string? token;
    private string? newPassword;
    private string? confirmPassword;


    protected override async Task OnInitializedAsync()
    {
        token = await LocalStorage.GetItemAsStringAsync("token");

        // 2. Skicka token till API för att kolla om vi är inloggade

        loginStatus = await UserManager.CheckUserLogin(token);

        // 3. Spara inloggningsstatus i en bool (inloggad/inte inloggad)

        loadingMessage = "Loading interests...";
        interests = await InterestManager.GetInterests();
        userInterests = await InterestManager.GetUserInterests(token);
        loadingMessage = "Finished loading!";
    }

    private async Task AddInterest(int id)
    {
        var ui = interests.FirstOrDefault(ui => ui.Id == id);

        if(ui != null)
        {
            await InterestManager.AddUserInterests(ui, token);
            userInterests = await InterestManager.GetUserInterests(token);
            StateHasChanged();
        }
    }

    public async Task CreateNewInterest()
    {
        // Get token
        tokenFromLocalStorage = await LocalStorage.GetItemAsStringAsync("token");

        // Skickar token tillsammans med Interest objekt
        await InterestManager.CreateInterest(Interest, tokenFromLocalStorage);

        interests = await InterestManager.GetInterests();
    }


    public void DeleteUser()
    {
        UserManager.DeleteUser(token);

        string action = "Deleted";

        NavigationManager.NavigateTo($"LogoutLanding/{action}", true);
    }

    

    

    public async Task ChangePassword()
    {
        // Run change password method in UserManager

        string token = await LocalStorage.GetItemAsStringAsync("token");

        if(newPassword == confirmPassword && token != null)
        {
            await UserManager.ChangePasswordUser(User, newPassword, token);
        }
    }

   
}



@*
● Se intressen man har på sin användare
● Se alla intressen som finns på appen
● Skapa nya intressen
● Lägga till redan existerande intressen till sin användare
● Ta bort intressen från sin användare
● Ta bort intressen man själv skapat från appen
● Byta lösenord
● Se, ändra och ta bort profilbild
● Ta bort intressen om man är admin
● Se om man är admin
● Tilldela adminrättigheter till andra användare om man är admin
● Ta bort adminrättigheter från andra användare om man är admin
● Banna andra användare om man är admin
● Avbanna andra användare om man är admin
● Möjligheten bestämma målspråk för översättning (se avsnittet “Bedömning - Niceto-have” nedan)
● Se trådar man skapat
● Flagga sin användare som borttagen
● Ta bort sitt användare*@
