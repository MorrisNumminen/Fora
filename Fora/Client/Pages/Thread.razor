@using Fora.Shared
@using Blazored.LocalStorage;
@inject IThreadManager ThreadManager;
@inject IUserManager UserManager;
@inject ILocalStorageService LocalStorage;
@page "/thread/{ThreadId:int}"


<PageTitle>Thread Page</PageTitle>
<style>
body {
  background-image: url('https://static0.srcdn.com/wordpress/wp-content/uploads/2022/02/Elden-Ring-Berserk-Easter-Egg-Guts-Greatsword.jpg');
}
</style>



<h3>@CurrentThread.Name</h3>

<div>
    <EditForm Model="@NewMessage" OnValidSubmit="CreateMessage">
        <InputTextArea @bind-Value="NewMessage.Message" type="textarea" placeholder="Enter message:"></InputTextArea>
        <button type="submit">Post Message</button>
    </EditForm>
</div>

@foreach( var MessageObj in Messages)
{
    if(CurrentUser.UserName == MessageObj.User.Username)
    {
        Color = "bg-primary";
    }
    else
    {
        Color = "";
    }
    <div class="card @Color">
            <img src="https://www.business2community.com/wp-content/uploads/2017/08/blank-profile-picture-973460_640.png" alt="Avatar" style="width:5%">
            <h4><b>@MessageObj.User.Username</b></h4>
            <div class="m-lg-3 card card-body">
            @if(CurrentUser.UserName == MessageObj.User.Username){
                if (EditState)
                {
                    <EditForm Model="@EditedMessage" OnValidSubmit="() => SaveMessage(MessageObj)">
                        <InputTextArea @bind-Value="EditedMessage.Message">@MessageObj.Message</InputTextArea>
                        <button class="mx-2 my-1" type="submit">Save changes</button>
                    </EditForm>
                }
                else
                {
                    <p>@MessageObj.Message</p>
                    <div>
                        <btn class="btn btn-outline-info" @onclick="EditMessage" >Edit</btn>
                    </div>
                }

            }
            else
            {
                <p>@MessageObj.Message</p>
            }

            </div>          
        </div>          



    <br/>
}




@code {

    [Parameter]
    public int ThreadId { get; set; }

    public ApplicationUser CurrentUser { get; set; }

    public ThreadModel CurrentThread = new();

    public MessageModel NewMessage { get; set; } = new();
    public MessageModel EditedMessage { get; set; } = new();

    public bool EditState { get; set; }
    public int EditValue { get; set; }
    public string Color { get; set; }

    //public MsgDto NewMessage { get; set; } = new();

    public List<MessageModel> Messages = new();

    string tokenFromLocalStorage = "Före token";
    private string? token;


    protected override async Task OnInitializedAsync()
    {
        token = await LocalStorage.GetItemAsStringAsync("token");

        CurrentUser = await UserManager.GetAsync(token);
        Messages = await ThreadManager.GetThreadMessages(ThreadId);
        Messages.Reverse();
    }



    public async Task CreateMessage()
    {


        // Get token
        tokenFromLocalStorage = await LocalStorage.GetItemAsStringAsync("token");

        // Skickar token tillsammans med Message objekt
        NewMessage.ThreadId = ThreadId;
        NewMessage.Date = DateTime.Now.ToString();

        await ThreadManager.CreateNewMessage(NewMessage, tokenFromLocalStorage);
        Messages = await ThreadManager.GetThreadMessages(ThreadId);
        Messages.Reverse();
        StateHasChanged();
    }

    public async Task EditMessage()
    {
        EditState = true;
    }

    public async Task SaveMessage(MessageModel message)
    {

        message.Message = EditedMessage.Message;

        await ThreadManager.PutMessageAsync(message);
        EditState = false;

    }





    //public void EditMessage()
    //{
    //    EditThisMessage = true;
    //    StateHasChanged();
    //}
    //public async Task SaveMessage(string message, int id)
    //{
    //    //message.Message = EditedMessage.Message;
    //    //await ThreadManager.PutMessageAsync(message);
    //    Messages = await ThreadManager.GetThreadMessages(ThreadId);
    //    StateHasChanged();
    //}


    public async Task DeleteMessage(int id)
    {
        tokenFromLocalStorage = await LocalStorage.GetItemAsStringAsync("token");
    }

}
