@using Microsoft.AspNetCore.Identity;
@using System.ComponentModel.DataAnnotations
@using Fora.Client.Services
@using Fora.Shared
@using Blazored.LocalStorage
@inject IThreadManager ThreadManager;
@inject IUserManager UserManager;
@inject ILocalStorageService LocalStorage;
@inject IInterestManager InterestManager;
@page "/threads"


<PageTitle>Threads</PageTitle>

<style>
body {
  background-image: url('https://static0.srcdn.com/wordpress/wp-content/uploads/2022/02/Elden-Ring-Berserk-Easter-Egg-Guts-Greatsword.jpg');
}
</style>

@*
<form onsubmit="@OnSearch">
    <label for="searchStr"> Search: </label>
    <input type="text" id="searchStr"/>
    <input type="submit" />
</form>

<EditForm Model=@Thread OnSubmit="@(OnSearch)">
    <label for="search">Search</label>
    <InputText PlaceHolder="CaseSensetive!" @bind-Value=(SearchTerm)></InputText>
    <input type="submit" />
</EditForm>
*@
<h3>Threads</h3>

<h4>Start A Topic</h4>

<div class="card">
        <div class="card-header">
            <button  class="btn btn-outline-info" @onclick="ToggleCreateThread">Create Thread</button>
        </div>
    </div>
@if (showCreateThread)
{

<EditForm Model="@Thread" OnSubmit="CreateNewThread">

<InputSelect @bind-Value="@Interest.Name">
    
    <option value="Select" selected disabled>Select Interest</option>
            @foreach(var interest in allInterest)
            {
                <option value="@interest.Name"> @interest.Name </option>
            }            
</InputSelect>

    <InputText @bind-Value="Thread.Name" type="text" placeholder="Title for thread"></InputText>
    <button type="submit">Start topic!</button>
</EditForm>
}

@foreach(var thread in ThreadsList)
    {
        <div>
        @*<a> @Interest.Name</a>*@
        @if(CurrentUser.UserName == thread.User.Username)
        {
            
            @if(loginStatus != null && loginStatus.IsBanned)
            {
            <a style="color: orange" >[Banned User]</a>
            }

        }
        
        <a class="btn-outline-light" href="thread/@thread.Id">@thread.Name</a>        
        </div>
        <br/>
    }



@code {
    //hämta ut alla namn(strings) på threads från den riktiga listan och spara det i en ny lista
    //sortera den listan och loopa igenom den för att visa namnen med html

    //placeholder List

    public InterestModel Interest { get; set; } = new();
    public List<InterestModel>? allInterest = new();

    private string SearchTerm { get; set; } = string.Empty;

    public List<ThreadModel> ThreadsList = new();

    string tokenFromLocalStorage = "Före token";

    public ThreadModel Thread { get; set; } = new();

    public List<string> SearchList = new();

    private bool showCreateThread;
    public ApplicationUser CurrentUser { get; set; }
    private string? interestName;
    private LoginDto? loginStatus;
    private string? token;

    protected override async Task OnInitializedAsync()
    {
        //    return base.OnInitializedAsync();
        ThreadsList = await ThreadManager.GetThreads();
        //ThreadsList.Sort();
        token = await LocalStorage.GetItemAsStringAsync("token");

        CurrentUser = await UserManager.GetAsync(token);
        loginStatus = await UserManager.CheckUserLogin(token);

        allInterest = await InterestManager.GetInterests();
    }

    private void ToggleCreateThread()
    {
        if (showCreateThread == false)
        {
            showCreateThread = true;
        }
        else
        {
            showCreateThread = false;
        }
    }


    public async Task CreateNewThread()
    {
        // Get token
        tokenFromLocalStorage = await LocalStorage.GetItemAsStringAsync("token");

        // Skickar token tillsammans med Interest objekt
        await ThreadManager.CreateNewThread(Thread, tokenFromLocalStorage);
        showCreateThread = false;
        ThreadsList = await ThreadManager.GetThreads();
        //ThreadsList.Sort();



    }


}
