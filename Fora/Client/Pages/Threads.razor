@using Microsoft.AspNetCore.Identity;
@using System.ComponentModel.DataAnnotations
@using Fora.Client.Services
@using Fora.Shared
@using Blazored.LocalStorage
@inject IThreadManager ThreadManager;
@inject IUserManager UserManager;
@inject ILocalStorageService LocalStorage;
@inject IInterestManager InterestManager;
@page "/threads"


<PageTitle>Threads</PageTitle>

<style>
body {
  background-image: url('https://static0.srcdn.com/wordpress/wp-content/uploads/2022/02/Elden-Ring-Berserk-Easter-Egg-Guts-Greatsword.jpg');
}
</style>


<EditForm Model="@SearchDto" OnValidSubmit="GetSearchList">
    @*FORM VALIDATION*@
    <DataAnnotationsValidator />

    @*Search*@
    <div class="my-3">
        <InputText @bind-Value="@SearchDto.SearchWord" placeholder="Search:"></InputText>
        <button class="btn-info" type="submit" @onclick="@GetSearchList">Search</button>
    </div>
    
    @*SEARCH METHOD*@
    <InputSelect @bind-Value="@SearchDto.SearchMethod">
        <option value="Select" selected disabled="disabled">(Sorting Method)</option>
        <option value="thread">Thread Title</option>
        <option value="interest">Interest</option>
    </InputSelect>

    @*SORT*@
    <InputSelect @bind-Value="@SearchDto.SortMethod">
        <option value="Select" selected disabled="disabled">(Sorting Method)</option>
        <option value="az">A-Z</option>
        <option value="za">Z-A</option>
    </InputSelect>
    <ValidationMessage For="@(() => SearchDto.SortMethod)" />
   
</EditForm>

SearchMethod
<h3>Threads</h3>

<h4>Start A Topic</h4>

<div class="card">
        <div class="card-header">
            <button  class="btn btn-outline-info" @onclick="ToggleCreateThread">Create Thread</button>
        </div>
    </div>
@if(showCreateThread)
{

<EditForm Model="@Thread" OnValidSubmit="CreateNewThread">

    <InputSelect @bind-Value="@Thread.InterestId">
        <option value="Select" selected disabled>Select Interest</option>
                @foreach(var interest in allInterest)
                {
                    <option value="@interest.Id"> @interest.Name </option>
                }            
    </InputSelect>
    <InputText @bind-Value="Thread.Name" type="text" placeholder="Title for thread"></InputText>
    <button type="submit">Start topic!</button>

</EditForm>

}

@foreach(var thread in ThreadsList)
{
    //Console.WriteLine(NumberOfMsgsList[counter]);
    @if(thread.User != null)
        {
            @if(CurrentUser.UserName == thread.User.Username)
            {
                @if(thread.User.Banned)
                {
                    <a style="color: orange" >[Banned User] </a>
                }
                @if (thread.User.Deleted)
                {
                    <a style="color: orange" >[Deleted User] </a>
                }
            }
        }
        @if(counter == NumberOfMsgsList.Count())
        {
            counter = 0;
        }
    @if(thread.Interest != null)
    {
        <a>@thread.Interest.Name</a>
    }

        <a class="btn-outline-light" href="thread/@thread.Id">@thread.Name</a>
       <p>Messages: @NumberOfMsgsList[counter]</p>
        counter++;
    <br/>
}



@code {

    public List<ThreadModel> SearchList { get; set; }
    public string SearchWord { get; set; } = String.Empty;
    public SearchDto SearchDto { get; set; } = new SearchDto
    {
        SearchWord = String.Empty,
        SearchMethod = "thread",
        SortMethod = "az"
    };

    //placeholder List
    public int PlaceHolderID { get; set; }
    public int counter { get; set; }
    public int? NumberOfMsgs { get; set; }
    public List<int?> NumberOfMsgsList = new();

    public InterestModel Interest { get; set; } = new();
    public List<InterestModel>? allInterest = new();

    public List<ThreadModel> ThreadsList = new();

    string tokenFromLocalStorage = "Före token";

    public ThreadModel Thread { get; set; } = new();

    private bool showCreateThread;
    public ApplicationUser CurrentUser { get; set; }
    public UserModel ThreadCreator { get; set; }
    private string? interestName;
    private LoginDto? loginStatus;
    private string? token;

    protected override async Task OnInitializedAsync()
    {
        PlaceHolderID = 1;
        //    return base.OnInitializedAsync();
        ThreadsList = await ThreadManager.GetThreads();
        //ThreadsList.Sort();
        token = await LocalStorage.GetItemAsStringAsync("token");

        CurrentUser = await UserManager.GetAsync(token);
        loginStatus = await UserManager.CheckUserLogin(token);

        allInterest = await InterestManager.GetInterests();
        await MsgCounter();
    }

    public async Task GetSearchList()
    {
        List<ThreadModel>? tempList = null;

        var response = await ThreadManager.GetThreads();
        tempList = response.ToList();

        if (tempList != null)
        {
            //Search by thread title
            if(SearchDto.SearchMethod == "thread")
            {
            SearchList = tempList.Where(a => a.Name.ToLower().Contains(SearchDto.SearchWord.ToLower())).ToList();
            }
            //Search by interest name
            else if(SearchDto.SearchMethod == "interest")
            {
            SearchList = tempList.Where(a => a.Interest.Name.ToLower().Contains(SearchDto.SearchWord.ToLower())).ToList();
            }

        }


        switch (SearchDto.SortMethod)
        {
            case "az":
                SearchList = SearchList.OrderBy(x => x.Name).ToList();
                break;
            case "za":
                SearchList = SearchList.OrderByDescending(x => x.Name).ToList();
                break;
        }

        ThreadsList = SearchList;
        StateHasChanged();
    }


    private void ToggleCreateThread()
    {
        if (showCreateThread == false)
        {
            showCreateThread = true;
        }
        else
        {
            showCreateThread = false;
        }
    }

    public async Task CreateNewThread()
    {
        // Get token
        tokenFromLocalStorage = await LocalStorage.GetItemAsStringAsync("token");

        // Skickar token tillsammans med Interest objekt
        await ThreadManager.CreateNewThread(Thread, tokenFromLocalStorage);
        showCreateThread = false;
        ThreadsList = await ThreadManager.GetThreads();
        

    }

    public async Task MsgCounter()
    {
        foreach(var thread in ThreadsList)
        {
            var msgsList = await GetListAsync();
            NumberOfMsgs = msgsList.Count();
            if(NumberOfMsgs == null)
            {
                NumberOfMsgs = 0;
                NumberOfMsgsList.Add(NumberOfMsgs);
            }
            else
            {
                NumberOfMsgsList.Add(NumberOfMsgs);
            }
            PlaceHolderID++;
        }
    }

    public async Task<List<MessageModel>> GetListAsync()
    {
        var tmpList = await Task.Run(() => ThreadManager.GetThreadMessages(PlaceHolderID));
        return tmpList;
    }

}
