@using Microsoft.AspNetCore.Identity;
@using System.ComponentModel.DataAnnotations
@using Fora.Client.Services
@using Fora.Shared
@using Blazored.LocalStorage
@inject IInterestManager IntrestsManager;
@inject IThreadManager ThreadManager;
@inject IUserManager UserManager;
@inject ILocalStorageService LocalStorage;
@inject IInterestManager InterestManager;
@page "/threads"


<PageTitle>Threads</PageTitle>

<style>
body {
  background-image: url('https://static0.srcdn.com/wordpress/wp-content/uploads/2022/02/Elden-Ring-Berserk-Easter-Egg-Guts-Greatsword.jpg');
}
</style>
@*
<form onsubmit="@OnSearch">
    <label for="searchStr"> Search: </label>
    <input type="text" id="searchStr"/>
    <input type="submit" />
</form>

<EditForm Model=@Thread OnSubmit="OnSearch">
    <label for="search">Search</label>
    <InputText PlaceHolder="CaseSensetive!" @bind-Value="SearchTerm""></InputText>
    <input type="submit" />
</EditForm>
*@

<h3>Threads</h3>
<h4>Start A Topic</h4>

<EditForm Model=@Thread OnSubmit=FormSubmitted>
    <div class="form-group">
        <label for="Name">Thread Title</label>
        <InputText @bind-Value="Thread.Name" class="form-control" id="Name"></InputText>
    </div>
    <input type="submit" class="btn btn-primary" value="Submit"/>
</EditForm>

@*<EditForm Model="@Thread" OnSubmit="CreateNewThread">
    <InputText @bind-Value="Thread.Name" type="text" placeholder="Title for thread"></InputText>
    <button type="submit">Start topic!</button>
</EditForm>*@

@foreach(var thread in ThreadsList)
    {
    if(counter == NumberOfMsgsList.Count())
    {
        counter = 1;
    }
    <a class="btn-outline-light" href="thread/@thread.Id">@thread.Name</a>
    <p>Messages: @NumberOfMsgsList[counter]</p>
    counter++;
    }

@*
@if(SearchList.Count() == 0)
<div class="card">
        <div class="card-header">
            <button  class="btn btn-outline-info" @onclick="ToggleCreateThread">Create Thread</button>
        </div>
    </div>
@if (showCreateThread)
{

<EditForm Model="@Thread" OnValidSubmit="CreateNewThread">
    <InputSelect @bind-Value="@Interest.Name">
        <option value="Select" selected disabled>Select Interest</option>
                @foreach(var interest in allInterest)
                {
                    <option value="@interest.Name"> @interest.Name </option>
                }            
    </InputSelect>
    <InputText @bind-Value="Thread.Name" type="text" placeholder="Title for thread"></InputText>
    <button type="submit">Start topic!</button>
</EditForm>
}

@foreach(var thread in ThreadsList)
{
    <div>
        @*<a> @Interest.Name</a>*@
        @if(thread.User != null)
        {
            @if(CurrentUser.UserName == thread.User.Username)
            {
                @if(thread.User.Banned)
                {
                    <a style="color: orange" >[Banned User] </a>
                }
                @if (thread.User.Deleted)
                {
                    <a style="color: orange" >[Deleted User] </a>
                }
            }
        }
        <a class="btn-outline-light" href="thread/@thread.Id">@thread.Name</a>        
    </div>
    <br/>
}



@code {
    //hämta ut alla namn(strings) på threads från den riktiga listan och spara det i en ny lista
    //sortera den listan och loopa igenom den för att visa namnen med html

    public Threads()
    {
    }
    public int counter { get; set; }
    public int PlaceHolderID { get; set; }

    public int? NumberOfMsgs { get; set; }
    public InterestModel Interest { get; set; } = new();
    public List<InterestModel>? allInterest = new();

    private string SearchTerm { get; set; } = string.Empty;

    public List<ThreadModel> ThreadsList = new();

    public ThreadModel Thread = new();

    string tokenFromLocalStorage = "Före token";

    public List<int?> NumberOfMsgsList = new();


    private bool showCreateThread;
    public ApplicationUser CurrentUser { get; set; }
    public UserModel ThreadCreator { get; set; }
    private string? interestName;
    private LoginDto? loginStatus;
    private string? token;

    protected override async Task OnInitializedAsync()
    {
        counter = 1;
        PlaceHolderID = 1;
        ThreadsList = await ThreadManager.GetThreads();
        NumberOfMsgsList.Add(null); //Första index 0 är null för att det ska bli lätare. Index 1 tillhör ThreadId 1, index 2 tillhör threadId 2 osv
        await MsgCounter();
    }

    public async void FormSubmitted(EditContext editContext)
    {
        bool isFormvalid = editContext.Validate();
        if (isFormvalid)
        {
            await CreateThread(Thread.Name);
        }
    }

    public async Task CreateThread(string threadName)
        //    return base.OnInitializedAsync();
        ThreadsList = await ThreadManager.GetThreads();
        foreach(ThreadModel thread in ThreadsList)
        {
            
        }
        //ThreadsList.Sort();
        token = await LocalStorage.GetItemAsStringAsync("token");

        CurrentUser = await UserManager.GetAsync(token);
        loginStatus = await UserManager.CheckUserLogin(token);

        allInterest = await InterestManager.GetInterests();
    }

    private void ToggleCreateThread()
    {
        if (showCreateThread == false)
        {
            showCreateThread = true;
        }
        else
        {
            showCreateThread = false;
        }
    }

    public async Task CreateNewThread()
    {
        // Get token
        tokenFromLocalStorage = await LocalStorage.GetItemAsStringAsync("token");

        // Skickar token tillsammans med Interest objekt
        await ThreadManager.CreateNewThread(Thread, tokenFromLocalStorage);
        showCreateThread = false;
        ThreadsList = await ThreadManager.GetThreads();
        await MsgCounter();
        StateHasChanged();
    }

    public async Task MsgCounter()
    {
        foreach(var thread in ThreadsList)
        {
            var msgsList = await GetListAsync();
            NumberOfMsgs = msgsList.Count();
            if(NumberOfMsgs == null)
            {
                NumberOfMsgs = 0;
                NumberOfMsgsList.Add(NumberOfMsgs);
            }
            else
            {
                NumberOfMsgsList.Add(NumberOfMsgs);
            }
            PlaceHolderID++;
        }
    }

    public async Task<List<MessageModel>> GetListAsync()
    {
        var tmpList = await Task.Run(() => ThreadManager.GetThreadMessages(PlaceHolderID));
        return tmpList;
    }
}
