@using Microsoft.AspNetCore.Identity;
@using System.ComponentModel.DataAnnotations
@using Fora.Client.Services
@using Fora.Shared
@using Blazored.LocalStorage
@inject IThreadManager ThreadManager;
@inject IUserManager UserManager;
@inject ILocalStorageService LocalStorage;
@page "/threads"


<PageTitle>Threads</PageTitle>

<style>
body {
 
  background-image: url('https://www.logolynx.com/images/logolynx/3f/3f28b0c181a4256c68c5e727767c2935.png');
  
}
</style>

@*
<form onsubmit="@OnSearch">
    <label for="searchStr"> Search: </label>
    <input type="text" id="searchStr"/>
    <input type="submit" />
</form>

<EditForm Model=@Thread OnSubmit="@(OnSearch)">
    <label for="search">Search</label>
    <InputText PlaceHolder="CaseSensetive!" @bind-Value=(SearchTerm)></InputText>
    <input type="submit" />
</EditForm>
*@
<h3>Threads</h3>

<h4>Start A Topic</h4>
<EditForm Model="@Thread" OnSubmit="CreateNewThread">
    <InputText @bind-Value="Thread.Name" type="text" placeholder="Title for thread"></InputText>
    <button type="submit">Start topic!</button>
</EditForm>

@foreach(var thread in ThreadsList)
    {
        <a class="btn-outline-light" href="thread">@thread.Name</a>
        <br/>
    }

@*
@if(SearchList.Count() == 0)
{
    foreach(var thread in ThreadsList)
    {
        <a href="thread">@thread.Name</a>
        <br/>
    }
}
else if (SearchList.Count() > 0)
{
    foreach(var searchThread in SearchList)
    {
        <a href="thread">@searchThread</a>
        <br/>
    }
}
*@

@code {
    //hämta ut alla namn(strings) på threads från den riktiga listan och spara det i en ny lista
    //sortera den listan och loopa igenom den för att visa namnen med html

    //placeholder List

    public InterestModel Intrest { get; set; } = new();

    private string SearchTerm { get; set; } = string.Empty;

    public List<ThreadModel> ThreadsList = new();

    string tokenFromLocalStorage = "Före token";

    public ThreadModel Thread { get; set; } = new();

    public List<string> SearchList = new();

    protected override async Task OnInitializedAsync()
    {
        //    return base.OnInitializedAsync();

        ThreadsList = await ThreadManager.GetThreads();
        //ThreadsList.Sort();
    }




        public async Task CreateNewThread()
    {
        // Get token
        tokenFromLocalStorage = await LocalStorage.GetItemAsStringAsync("token");

        // Skickar token tillsammans med Interest objekt
        await ThreadManager.CreateNewThread(Thread, tokenFromLocalStorage);

        ThreadsList = await ThreadManager.GetThreads();
        //ThreadsList.Sort();



    }


}
