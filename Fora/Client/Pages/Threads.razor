@using Microsoft.AspNetCore.Identity;
@using System.ComponentModel.DataAnnotations
@using Fora.Client.Services
@using Fora.Shared
@using Blazored.LocalStorage
@inject IInterestManager IntrestsManager;
@inject IThreadManager ThreadManager;
@inject IUserManager UserManager;
@inject ILocalStorageService LocalStorage;
@page "/threads"


<PageTitle>Threads</PageTitle>

<style>
body {
  background-image: url('https://static0.srcdn.com/wordpress/wp-content/uploads/2022/02/Elden-Ring-Berserk-Easter-Egg-Guts-Greatsword.jpg');
}
</style>

<EditForm Model=SearchTerm OnValidSubmit=@HandleValidSubmit>
    <label for="SearchTerm">Search</label>
    <InputText @bind-Value="SearchTerm"></InputText>
    <input type="submit"/>
</EditForm>
<p>To get all threads, enter nothing in the feild and press submit</p>

<h3>Threads</h3>
<h4>Start A Topic</h4>
<EditForm Model="@Thread" OnValidSubmit="@FormSubmitted">
    <InputText @bind-Value="Thread.Name" type="text" placeholder="Title for thread"></InputText>
    <button type="submit">Start topic!</button>
</EditForm>
<br />

@if(SearchList.Count() == 0 && NumberOfMsgsList.Count() != 0)
{
    @foreach(var thread in ThreadsList)
    {
        <a class="btn-outline-light" href="thread/@thread.Id">@thread.Name</a>
        <p>Messages: @NumberOfMsgsList[counter]</p>
        if (counter < NumberOfMsgsList.Count() && counter + 1 != NumberOfMsgsList.Count())
        {
            counter++; 
        }
        else
        {
            continue;
        }

    }
}
else if(SearchList.Count() > 0 && NumberOfSearchMsgsList.Count() != 0)
{
    foreach(var thread in SearchList)
    {
        <a class="btn-outline-light" href="thread/@thread.Id">@thread.Name</a>
        <p>Messages: @NumberOfSearchMsgsList[searchCounter]</p>
        if (searchCounter < NumberOfSearchMsgsList.Count() && searchCounter + 1 != NumberOfSearchMsgsList.Count())
        {
            searchCounter++;
        }
        else
        {
            continue;
        }

    }
    SearchList.Clear();
}

@code {
    //hämta ut alla namn(strings) på threads från den riktiga listan och spara det i en ny lista
    //sortera den listan och loopa igenom den för att visa namnen med html

    public Threads()
    {
    }
    public bool isFormvalid { get; set; }
    public int counter { get; set; }
    public int searchCounter { get; set; }
    public int PlaceHolderID { get; set; }
    public int SearchPlaceHolderId { get; set; }

    public int? NumberOfMsgs { get; set; }
    public List<int?> NumberOfMsgsList = new();
    public int? NumberOfSearchMsgs { get; set; }
    public List<int?> NumberOfSearchMsgsList = new();

    public string SearchTerm { get; set; } = string.Empty;
    public List<ThreadModel> SearchList = new();

    public List<ThreadModel> ThreadsList = new();
    public ThreadModel Thread = new();

    string tokenFromLocalStorage = "Före token";


    protected override async Task OnInitializedAsync()
    {
        counter = 0;
        searchCounter = 0;
        PlaceHolderID = 1;
        ThreadsList = await ThreadManager.GetThreads();
        await MsgCounter();
    }

    public async void FormSubmitted(EditContext editContext) // validates the create new thread form
    {
        isFormvalid = editContext.Validate();
        if (isFormvalid)
        {
            counter = 0;
            PlaceHolderID = 1;
            NumberOfMsgsList.Clear();
            await CreateNewThread(Thread.Name);
        }
        StateHasChanged();
    }

    public async void HandleValidSubmit(EditContext editContext) // validates the search form
    {
        bool isFormValid = editContext.Validate();
        if (isFormValid)
        {
            searchCounter = 0;
            SearchList.Clear();
            NumberOfSearchMsgsList.Clear();
            OnSearch(SearchTerm);
            await SearchListMsgCounter();
        }
        StateHasChanged();
    }

    public async Task CreateNewThread(string threadName)
    {
        // Get token
        tokenFromLocalStorage = await LocalStorage.GetItemAsStringAsync("token");

        Thread.Name = threadName;
        //Thread.UserId = UserManager.CurrenUser.Id Så man vet vem som har skapat tråden 

        // Skickar token tillsammans med Interest objekt
        await ThreadManager.CreateNewThread(Thread, tokenFromLocalStorage);

        ThreadsList = await ThreadManager.GetThreads();
        await MsgCounter();
    }

    public async Task MsgCounter()
    {
        foreach(var thread in ThreadsList)
        {
            var msgsList = await GetListAsync();
            NumberOfMsgs = msgsList.Count();
            if(NumberOfMsgs == null)
            {
                NumberOfMsgs = 0;
                NumberOfMsgsList.Add(NumberOfMsgs);
            }
            else
            {
                NumberOfMsgsList.Add(NumberOfMsgs);
            }
            PlaceHolderID++;
        }
    }

    public async Task<List<MessageModel>> GetListAsync()
    {
        var msgsInThread = await Task.Run(() => ThreadManager.GetThreadMessages(PlaceHolderID));
        return msgsInThread;
    }

    public async Task<List<MessageModel>> GetSearchListAsync()
    {
        var msgsInThread = await Task.Run(() => ThreadManager.GetThreadMessages(SearchPlaceHolderId));
        return msgsInThread;
    }



    public async Task<List<int?>> SearchListMsgCounter()
    {
        foreach (var thread in SearchList)
        {
            SearchPlaceHolderId = thread.Id;
            var msgs = await GetSearchListAsync();
            NumberOfSearchMsgs = msgs.Count();
            if(NumberOfSearchMsgs == null)
            {
                NumberOfSearchMsgs = 0;
                NumberOfSearchMsgsList.Add(NumberOfSearchMsgs);
            }
            else
            {
                NumberOfSearchMsgsList.Add(NumberOfSearchMsgs);
            }
        }
        return NumberOfSearchMsgsList;
    }

    public List<ThreadModel> OnSearch(string SearchTerm)
    {
        if(SearchTerm != "") //if SearchTerm contains the word/sentance enterd in the search feild
        {
            foreach (var thread in ThreadsList)
            {
                if (thread.Name.Contains(SearchTerm))
                {
                    SearchList.Add(thread);
                }
                else
                {
                    continue;
                }
            }
        }
        else if (SearchTerm == "") // If the SearchTerm Contains an empty string, return SearchList as empty
        {
            SearchList.Clear();
        }
        return SearchList;
    }
}
